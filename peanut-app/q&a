Wifi Authentication is utilized in wifiService.js. 

Wi-Fi Authentication
Network Name (SSID):

Password:

Connect
Wi-Fi Authentication
Connect. I suspect that I need to consolidate space in my app. Or some components aren't necessary. Please carefully analyze my code and determine if this is so. 




// App.js
import React, { useState } from 'react';
import WifiService from './wifi/wifiService.js';
import HexapodController from './controls/hexapodControl.js';
import WifiAuthentication from './wifi/wifiAuthentication.js';

function App() {
  const [isWifiConnected, setWifiConnected] = useState(false);

  const handleWifiConnect = () => {
    // Implement logic to send Wi-Fi credentials to ESP8266
    // Update isWifiConnected based on the connection result
    setWifiConnected(true); // Replace with actual logic

    // For simplicity, let's assume the connection is successful
    console.log('Connected to Wi-Fi');
  };

  return (
    <div className="App">
      <WifiAuthentication
        onConnect={handleWifiConnect}
        isWifiConnected={isWifiConnected}
      />
      <WifiService isWifiConnected={isWifiConnected} />
      {isWifiConnected && <HexapodController />}
    </div>
  );
}

export default App;




// wifiService.js
import React, { useState } from 'react';
import axios from 'axios';

const WifiService = ({ isWifiConnected, onConnect }) => {
  const handleConnect = () => {
    // Add any validation or error handling as needed
    onConnect();
  };

  return (
    <div>
      {isWifiConnected ? (
        <>
          {/* Your existing Wi-Fi service UI or controls */}
        </>
      ) : (
        <div>
          <h2>Wi-Fi Authentication</h2>
          <button onClick={handleConnect}>Connect</button>
        </div>
      )}
    </div>
  );
};

export default WifiService;




import React, { useState, useEffect } from 'react';
import WifiService from './wifiService.js';
import HexapodControl from '../controls/hexapodControl.js';
import './bluetooth control.css';

const WifiController = () => {
  const [device, setDevice] = useState(null);
  const [connected, setConnected] = useState(false);
  const [isMoving, setIsMoving] = useState(false);
  const [sliderValue, setSliderValue] = useState(0);

  const handleWifiConnect = async () => {
    console.log('Handling Wi-Fi connection...');
    try {
      const wifiDevice = await wifiService.connect();
      setDevice(wifiDevice);
      setConnected(true);
    } catch (error) {
      console.error('Wi-Fi connection failed:', error);
    }
  };

  const handleDisconnect = () => {
    WifiService.disconnect();
    setConnected(false);
    setDevice(null);
  };

  const handleSliderChange = async (event) => {
    const value = event.target.value;
    setSliderValue(value);

    // Assuming you want to send 'crawl_forward' or 'crawl_backward' based on the slider value
    const command = value === '100' ? 'crawl_forward' : 'crawl_backward';

    try {
      await wifiService.sendCommandToESP(command);
    } catch (error) {
      console.error('Failed to send command:', error);
    }
  };

  useEffect(() => {
    // Effect without cleanup function
    console.log('Component mounted');
    
    return () => {
      console.log('Component unmounted');
    };
  }, []); // Empty dependency array means this effect runs once on mount

  return (
    <div>
      <div className="buttons">
        <h2 className="Hex-head">Hexapod Control</h2>
        <h2>Status: {isMoving ? 'crawl_forward' : 'crawl-stop'}</h2>
        <HexapodControl device={device} />
      </div>
      <div className="slider-container">
        <input
          type="range"
          min="0"
          max="100"
          step="1"
          value={sliderValue}
          onChange={handleSliderChange}
          className="slider"
        />
        <p>Slider Value: {sliderValue}</p>
      </div>
      <button onClick={connected ? handleDisconnect : handleWifiConnect}>
        {connected ? 'Disconnect Wi-Fi' : 'Connect Wi-Fi'}
      </button>
    </div>
  );
};

export default WifiController;


import React, { useState } from 'react';

const WifiAuthentication = ({ onConnect, isWifiConnected }) => {
  const [ssid, setSSID] = useState('');
  const [password, setPassword] = useState('');

  const handleConnect = () => {
    // Add any validation or error handling as needed
    onConnect();
  };

  return (
    <div>
      {!isWifiConnected && (
        <>
          <h2>Wi-Fi Authentication</h2>
          <label>
            Network Name (SSID):
            <input type="text" value={ssid} onChange={(e) => setSSID(e.target.value)} />
          </label>
          <br />
          <label>
            Password:
            <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          </label>
          <br />
          <button onClick={handleConnect}>Connect</button>
        </>
      )}
    </div>
  );
};

export default WifiAuthentication;


import React, { useState } from 'react';
import './controller.css';
import axios from 'axios';

const HexapodController = ({ isWifiConnected }) => {
  const [scrollValue, setScrollValue] = useState(0);

  const handleScroll = (e) => {
    const value = e.target.value;
    setScrollValue(value);

    if (isWifiConnected) {
      // Example: Send command to ESP8266 based on the scroll value
      // Replace "your-esp8266-ip" with your ESP8266 module's IP address
      axios.post('http://your-esp8266-ip/control', { command: value })
        .then(response => {
          // Handle response if needed
          console.log('Command sent successfully:', response.data);
        })
        .catch(error => {
          // Handle error if needed
          console.error('Error sending command:', error);
        });
    }
  };

  return (
    <div>
      {isWifiConnected ? (
        <>
          <h2>Hexapod Controller</h2>
          <label>
            Scroll Value:
            <input type="range" min="0" max="100" value={scrollValue} onChange={handleScroll} />
          </label>
          {/* Add other controls or display as needed */}
        </>
      ) : (
        <div>
          <h2>Wi-Fi Not Connected</h2>
          <p>Please connect to Wi-Fi to control the hexapod.</p>
        </div>
      )}
    </div>
  );
};

export default HexapodController;
